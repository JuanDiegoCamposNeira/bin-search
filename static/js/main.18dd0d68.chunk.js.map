{"version":3,"sources":["Components/Navigationbar.js","Components/Square.js","Components/Screen.js","Components/App.js","index.js"],"names":["NavigationBar","props","state","search","add","number","this","setState","target","value","addNumber","num","className","style","zIndex","range","htmlFor","name","onChange","numberAdd","bind","disabled","limit","onClick","handleAddNUmber","numberSearch","handleSearchNumber","random","clear","React","Component","Square","backgroundColor","color","Screen","id","sortedNumbers","numbers","sort","a","b","val","map","col","result","mainColor","App","animationArray","isNaN","setTimeout","length","newNumbers","newNumber","parseInt","push","index","binarySearch","animatedBinarySearch","animation","array","i","j","updatedColors","left","right","middle","item","randomNumber","min","max","Math","floor","clearArray","ramdonArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18dd0d68.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Stylesheets/navbar.css\";\n\nclass NavigationBar extends React.Component {\n  //Constructor for the class\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\", //This will hold the numeber to search\n      add: \"\", //This will hold the number to add\n    };\n  }\n\n  //Function to set the variable for add\n  numberAdd(number) {\n    this.setState({ add: number.target.value });\n  }\n  //Function to set the variable for search\n  numberSearch(number) {\n    this.setState({ search: number.target.value });\n  }\n\n  //Function to add the number to the array on <App />\n  handleAddNUmber() {\n    let addNumber = this.state.add;\n    this.props.add(addNumber);\n    //Reset the state\n    this.setState({ add: \"\" });\n  }\n\n  //Function to search the number\n  handleSearchNumber(number) {\n    //Variable that holds the number to search\n    let num = this.state.search;\n    //Clear the field of search\n    this.setState({ search: \"\" });\n    //Call the function to execute the search\n    this.props.search(num);\n  }\n\n  //Render function\n  render() {\n    return (\n      <div className=\"navbar\">\n        <h1>Binary Search algorithm</h1>\n        <div className=\"inputs\">\n          <div className=\"hidden\" style={{ zIndex: this.props.range }}>\n            Range: -9 , 99\n          </div>\n          <div>\n            <label htmlFor=\"number\">Add a number : </label>\n            <input\n              name=\"number\"\n              value={this.state.add}\n              onChange={this.numberAdd.bind(this)}\n              disabled={this.props.limit}\n            />\n            <button onClick={this.handleAddNUmber.bind(this)}> Add </button>\n          </div>\n          <div>\n            <label htmlFor=\"search\">Search a number : </label>\n            <input\n              name=\"search\"\n              onChange={this.numberSearch.bind(this)}\n              value={this.state.search}\n            />\n            <button onClick={this.handleSearchNumber.bind(this)}>Search</button>\n          </div>\n          <div>\n            <button onClick={this.props.random}>Generate random Array</button>\n          </div>\n          <div>\n            <button onClick={this.props.clear}>Clear</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n//------------  Export the component  ----------------\nexport default NavigationBar;\n","import React from \"react\";\nimport \"../Stylesheets/square.css\";\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <div className=\"square\" style={{ backgroundColor: this.props.color }}>\n        {this.props.number}\n      </div>\n    );\n  }\n}\n\n//------------------  Export the class  ----------------------\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square.js\";\nimport \"../Stylesheets/screen.css\";\n\nexport default class Screen extends React.Component {\n  render() {\n    let id = 0;\n    let sortedNumbers = this.props.numbers;\n    sortedNumbers.sort((a, b) => {\n      return a.val - b.val;\n    });\n    return (\n      <div className=\"flex-container\">\n        <div className=\"content\">\n          {sortedNumbers.map((num) => {\n            return <Square key={id++} number={num.val} color={num.col} />;\n          })}\n        </div>\n        <div className=\"content\">\n          Index :<div className=\"result\">{this.props.result}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport NavigationBar from \"./Navigationbar.js\";\nimport Screen from \"./Screen.js\";\n\n//Variables\nconst mainColor = \"#e4e3e3\";\nconst changeColor = \"#84a9ac\";\nconst middleColor = \"#204051\";\nconst numbersMaxLength = 15;\n\nclass App extends React.Component {\n  //Constructor of the class\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: [], // This will holds the numbers on the array to perform binary search\n      result: \"\",\n      animationArray: [],\n      range: -1, //The z-index for the alert range\n      limit: false, //The limit of numbers in the array of numbers\n    };\n  }\n\n  //Function to handle add a number to the array\n  addNumber(number) {\n    //If the parameter is not a number or an empty string\n    if (isNaN(number) || number === \"\") return;\n    //If the number is out of bounds\n    if (number > 99 || number < -9) {\n      //Show the \"alert\" of range\n      this.setState({ range: 1 });\n      //Wait 4 seconds and \"hidde\" the alert\n      setTimeout(() => {\n        this.setState({ range: -1 });\n      }, 4000);\n      return;\n    }\n    //If the length is up to the limit, disable the input\n    if (this.state.numbers.length === numbersMaxLength) {\n      this.setState({ limit: true });\n      return;\n    }\n    //Otherwise, add the number to the array\n    let newNumbers = this.state.numbers;\n    let newNumber = { val: parseInt(number), col: mainColor };\n    newNumbers.push(newNumber);\n    this.setState({ numbers: newNumbers });\n  }\n\n  //Function to handle the clear option of the array\n  clearArray() {\n    this.setState({ numbers: [], result: \"\", animationArray: [] });\n  }\n\n  //Function to handle the search of a number\n  search(number) {\n    //If the parameter is not a number, empty or the length of the numbers array is 0\n    if (!number || isNaN(number) || this.state.numbers.length === 0) return;\n    //Otherwise, execute the search mecanism\n    let index;\n    this.binarySearch(number) >= 0\n      ? (index = this.binarySearch(number))\n      : (index = \"Not Found\");\n    //Set the result of the search\n    this.animatedBinarySearch();\n    this.setState({ result: index, animationArray: [] });\n  }\n\n  //Function to color the sub array\n  animatedBinarySearch() {\n    //Create the array from the map\n    let animation = this.state.animationArray;\n    let array = this.state.numbers;\n    for (let i = 0; i < animation.length; i++) {\n      setTimeout(() => {\n        for (let j = 0; j < array.length; j++) {\n          let updatedColors = this.state.numbers;\n          if (j === animation[i][1]) updatedColors[j].col = middleColor;\n          else if (j >= animation[i][0] && j <= animation[i][2])\n            updatedColors[j].col = changeColor;\n          else updatedColors[j].col = mainColor;\n          //Set the new state\n          this.setState({ numbers: updatedColors });\n        }\n      }, 3000 * i);\n    }\n  }\n\n  //Binary Search algorithm\n  binarySearch(num) {\n    //Array of numbers and the number to be searched\n    const numbers = this.state.numbers,\n      number = parseInt(num);\n    //Bounds of the search\n    let left = 0,\n      right = parseInt(numbers.length - 1),\n      middle = 0;\n    //While left bound is less than or equal to the right bound, search\n    while (left <= right) {\n      //Calculate the middle\n      middle = parseInt(left + (right - left) / 2);\n      //Put the bounds into the array\n      this.state.animationArray.push([left, middle, right]);\n      //If the number equals the middle, return the position (middle)\n      if (numbers[middle].val === number) return middle;\n      //If number < numbers[middle]\n      if (number < numbers[middle].val) right = middle - 1;\n      //If number > numbers[middle]\n      else if (number > numbers[middle].val) left = middle + 1;\n    }\n    //Return -1 if the element is not in the array\n    return -1;\n  }\n\n  //Function to generate a random arrray\n  ramdonArray() {\n    const array = [];\n    let item = {};\n    for (let i = 0; i < 15; i++) {\n      item = { val: this.randomNumber(0, 99), col: mainColor };\n      array.push(item);\n    }\n    //Set the new state\n    this.setState({ numbers: array });\n  }\n  //Generate the random number\n  randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  //Render function\n  render() {\n    return (\n      <div>\n        <NavigationBar\n          add={this.addNumber.bind(this)}\n          clear={this.clearArray.bind(this)}\n          search={this.search.bind(this)}\n          random={this.ramdonArray.bind(this)}\n          range={this.state.range}\n          limit={this.state.limit}\n        />\n        <Screen numbers={this.state.numbers} result={this.state.result} />\n      </div>\n    );\n  }\n}\n\n//------------  Export the component  ----------------\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}